{"majorversion": 1, "classmap": {"SimpleNote": {"name": "SimpleNote", "constructors": [{"description": "SimpleNote API wrapper class.\n\n Please note that the SimpleNote API expects everything to be UTF-8, and so\n does simplenote-js."}], "namespace": "", "module": "simplenote-js", "methods": {"searchNotes": {"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Returns notes containing a particular term.  Throws an exception if one of\n the arguments is missing or empty.\n\n This method will return a JSON object with two keys, `notes` (containing\n an array with found notes) and `totalRecords` (showing the total number of\n search results).\n\n Each note is represented as an object containing two keys, `key` (the note\n ID) and `body` (the note string).\n\n The method expects a configuration object with the following keys:\n\n * `query`: search string\n * `maxResults` (optional): max number of results (default: 10)\n * `offset` (optional): index offset\n * `success`: callback function to be called on success; the callback will\n    be passed the array containing the notes index\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.", "guessedname": "searchNotes", "guessedtype": "function"}, "_createNote": {"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Creates a new note.  Returns the new note ID.  Throws an exception if one\n of the arguments is missing or empty.\n\n Expects a configuration object with the following keys:\n\n * `body`: a string containing the note body\n * `success`: callback function to be called on success; the callback will\n    be passed the note ID string\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.", "private": ""}, "_getErrorCode": {"params": [{"type": "String", "name": "status", "description": "  The HTTP status code returned by YQL."}], "description": "Returns an error code for a passed HTTP status.", "private": ""}, "getOpenDataTable": {"return": {"type": "String", "description": "Open Data Table URL."}, "description": "Returns the Open Data table used in all YQL requests.", "guessedname": "getOpenDataTable", "guessedtype": "function"}, "_retrieveIndex": {"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Returns an index of all notes.  This method will return a JSON object with\n three main properties for each note: `key`, `modify`, and `deleted`.  Some\n notes may be marked `deleted`; these notes will be removed permanently\n the next time the client synchronizes with the server.\n\n Throws an exception if one of the arguments is missing or empty.\n\n The method expects a configuration object with the following keys:\n\n * `success`: callback function to be called on success; the callback will\n    be passed the array containing the notes index\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.\n\n The index will be returned as an array containing hashes.  The hashes\n contain the following keys:\n\n * `deleted`: true | false\n * `key`: the note ID\n * `modify`: a string containing the last-modified date", "private": ""}, "updateNote": {"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Updates an existing note.  Returns the note ID on success.  Throws an\n exception if one of the arguments is missing or empty.\n\n Expects a configuration object with the following keys:\n\n * `key`: the ID of the note to update\n * `body`: a string containing the note body\n * `success`: callback function to be called on success; the callback will\n    be passed the note ID string\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.", "guessedname": "updateNote", "guessedtype": "function"}, "_throwUnlessLoggedIn": {"description": "Throws an exception if either the internal email or token aren't set\n (which means the user's not logged in).", "private": ""}, "isLoggedIn": {"return": {"type": "Boolean", "description": ""}, "description": "Returns a boolean showing whether the user is currently logged in or not.", "guessedname": "isLoggedIn", "guessedtype": "function"}, "retrieveIndex": {"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Returns an index of all notes.  This method will return a JSON object with\n three main properties for each note: `key`, `modify`, and `deleted`.  Some\n notes may be marked `deleted`; these notes will be removed permanently\n the next time the client synchronizes with the server.\n\n The method expects a configuration object with the following keys:\n\n * `success`: callback function to be called on success; the callback will\n    be passed the array containing the notes index\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.\n\n Throws an exception if one of the arguments is missing or empty.", "guessedname": "retrieveIndex", "guessedtype": "function"}, "_validateRetrievalConfig": {"params": [{"type": "Object", "name": "obj", "description": "  The object to validate."}], "description": "Checks if the passed argument is an object and has `error` and `success`\n keys which are functions.  Throws an `ArgumentError` exception on failure.", "private": ""}, "_authenticate": {"params": [{"type": "Object", "name": "config", "description": "  SimpleNote account email address, password,\n             callbacks"}], "description": "Authenticates the client.  The request is made asynchronously via YQL.\n Throws an exception if one of the arguments is missing or empty.\n\n The method expects a configuration object with the following keys:\n\n * `email`: SimpleNote account email address\n * `password`: SimpleNote account password\n * `success`: callback function to be called on successful authentication\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.\n\n Both `success` and `error` are strictly speaking optional; omitting them\n might be pointless, tho.", "private": ""}, "deleteNote": {"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Deletes an existing note.  Throws an exception if one of the arguments is\n missing or empty.\n\n Expects a configuration object with the following keys:\n\n * `key`: the ID of the note to update\n * `permanently` (optional): set to `true` if you want to not only mark the\n    note as deleted on the server but to delete it right away (see SN API\n    docs)\n * `success`: callback function to be called on success; the callback will\n    be passed the note ID string\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.", "guessedname": "deleteNote", "guessedtype": "function"}, "setOpenDataTable": {"description": "Sets the Open Data table used in all YQL requests.  Usually, you'll want\n to put the Open Data table XML file (see `yql_simplenote.xml`) on a server\n controlled by you so you have full control over it.  If you do that, you\n can tell `SimpleNote` to use it by setting the new URL with this method.", "guessedname": "setOpenDataTable", "guessedtype": "function"}, "_queryYQL": {"params": [{"type": "String", "name": "caller", "description": "  Name of the calling method.  Used for log\n             output."}, {"type": "String", "name": "query", "description": "  The YQL query."}, {"type": "Function", "name": "cbSuccess", "description": "  The on-success callback."}, {"type": "Function", "name": "cbError", "description": "  The on-error callback."}, {"type": "Object", "name": "context", "description": "  The context of the callbacks mentioned above."}], "description": "Proxy method abstracting most YQL calls.", "private": ""}, "_updateNote": {"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Updates an existing note.  Returns the note ID on success.  Throws an\n exception if one of the arguments is missing or empty.\n\n Expects a configuration object with the following keys:\n\n * `key`: the ID of the note to update\n * `body`: a string containing the note body\n * `success`: callback function to be called on success; the callback will\n    be passed the note ID string\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.", "private": ""}, "_clearCredentials": {"description": "Deletes both `_email` and `_token` variables.", "private": ""}, "getAuthDetails": {"return": {"type": "Object", "description": "Auth info."}, "description": "Returns auth details, i.e. an object containing the current email address\n and auth token returned by the API after a successful login.", "guessedname": "getAuthDetails", "guessedtype": "function"}, "auth": {"params": [{"type": "Object", "name": "config", "description": "  SimpleNote account email address, password,\n             callbacks"}], "description": "Authenticates the client.  The request is made asynchronously via YQL.\n Throws an exception if one of the arguments is missing or empty.\n\n The method expects a configuration object with the following keys:\n\n * `email`: SimpleNote account email address\n * `password`: SimpleNote account password\n * `success`: callback function to be called on successful authentication\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.\n\n Both `success` and `error` are strictly speaking optional; omitting them\n might be pointless, tho.", "guessedname": "auth", "guessedtype": "function"}, "_deleteNote": {"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Deletes an existing note.  Throws an exception if one of the arguments is\n missing or empty.\n\n Expects a configuration object with the following keys:\n\n * `key`: the ID of the note to update\n * `permanently` (optional): set to `true` if you want to not only mark the\n    note as deleted on the server but to delete it right away (see SN API\n    docs)\n * `success`: callback function to be called on success; the callback will\n    be passed the note ID string\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.", "private": ""}, "_isLoggedIn": {"return": {"type": "Boolean", "description": ""}, "description": "Returns a boolean showing whether the user is currently logged in or not.", "private": ""}, "createNote": {"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Creates a new note.  Returns the new note ID.  Throws an exception if one\n of the arguments is missing or empty.\n\n Expects a configuration object with the following keys:\n\n * `body`: a string containing the note body\n * `success`: callback function to be called on success; the callback will\n    be passed the note ID string\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.", "guessedname": "createNote", "guessedtype": "function"}, "_searchNotes": {"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Returns notes containing a particular term.  Throws an exception if one of\n the arguments is missing or empty.\n\n This method will return a JSON object with two keys, `notes` (containing\n an array with found notes) and `totalRecords` (showing the total number of\n search results).\n\n Each note is represented as an object containing two keys, `key` (the note\n ID) and `body` (the note string).\n\n The method expects a configuration object with the following keys:\n\n * `query`: search string\n * `maxResults` (optional): max number of results (default: 10)\n * `offset` (optional): index offset\n * `success`: callback function to be called on success; the callback will\n    be passed the array containing the notes index\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.", "private": ""}, "enableDebug": {"params": [{"type": "Boolean", "name": "bool", "description": "  Enable/disable debugging."}], "description": "Enables console output of debugging messages.", "guessedname": "enableDebug", "guessedtype": "function"}, "_getYQLURL": {"params": [{"type": "String", "name": "query", "description": "  YQL query"}], "description": "Accepts a YQL query and returns the related YQL URL.", "private": ""}, "retrieveNote": {"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Retrieves and returns a single note as a hash in the following form:\n\n     {\n       body: \"my example note\",\n       key: \"agtzaW1wbG0LCxIETm90ZRjoBAw\",\n       modifydate: \"2008-12-18 04:04:20.554442\",\n       createdate: \"2008-12-18 04:04:20.554442\",\n       deleted: false\n     }  \n\n Expects a configuration object with the following keys:\n\n * `key`: the note ID\n * `success`: callback function to be called on success; the callback will\n    be passed the note hash\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.\n\n Throws an exception if one of the arguments is missing or empty.", "guessedname": "retrieveNote", "guessedtype": "function"}, "_retrieveNote": {"params": [{"type": "Object", "name": "config", "description": ""}], "description": "Retrieves and returns a single note as a hash in the following form:\n\n     {\n       body: \"my example note\",\n       key: \"agtzaW1wbG0LCxIETm90ZRjoBAw\",\n       modifydate: \"2008-12-18 04:04:20.554442\",\n       createdate: \"2008-12-18 04:04:20.554442\",\n       deleted: false\n     }  \n\n Throws an exception if one of the arguments is missing or empty.\n\n Expects a configuration object with the following keys:\n\n * `key`: the note ID\n * `success`: callback function to be called on success; the callback will\n    be passed the note hash\n * `error`: callback function to be called on failure, is passed a clear\n    text error string.", "private": ""}}, "file": "simplenote.js", "shortname": "SimpleNote", "requires": "jquery", "properties": {"VERSION": {"final": "", "type": "String", "description": "Returns the simplenote-js version number.", "guessedname": "VERSION", "guessedtype": "property"}, "_email": {"guessedname": "_email", "type": "String", "description": "After a successful login, this variable holds the account email address\n required for all subsequent API requests.", "private": "", "guessedtype": "property"}, "_debugEnabled": {"description": "Enables console output of debugging messages.", "default": "false", "private": "", "guessedname": "_debugEnabled", "guessedtype": "property", "type": "Boolean"}, "_token": {"guessedname": "_token", "type": "String", "description": "After a successful login, this variable holds the auth token required for\n all subsequent API requests.", "private": "", "guessedtype": "property"}, "_version": {"description": "The simplenote-js version number.", "private": "", "guessedname": "_version", "guessedtype": "property", "type": "String", "final": ""}, "_baseURL": {"description": "Contains the base URL of the API.", "private": "", "guessedname": "_baseURL", "guessedtype": "property", "type": "String", "final": ""}, "_yqlTableURL": {"description": "Contains the OpenData table used for all YQL calls.", "default": "http://github.com/carlo/simplenote-js/raw/master/src/yql_simplenote.xml", "private": "", "guessedname": "_yqlTableURL", "guessedtype": "property", "type": "String"}, "_yqlTableName": {"description": "Contains the table name used in YQL query.", "private": "", "guessedname": "_yqlTableName", "guessedtype": "property", "type": "String", "final": ""}}, "description": "SimpleNote API wrapper class.\n\n Please note that the SimpleNote API expects everything to be UTF-8, and so\n does simplenote-js."}}, "version": "1.0.1", "modules": {"simplenote-js": {"description": "SimpleNote API wrapper module.", "submodules": [], "classlist": ["SimpleNote"], "filelist": ["simplenote.js"], "subdata": {}, "name": "simplenote-js"}}, "filemap": {"simplenote.js": {"classlist": ["SimpleNote"], "name": "simplenote.js", "module": "simplenote-js"}}}